{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyMpKnSWXcOoHuDxNJEPl+9Z",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Hussien-M07amed/bloodcancerdetection/blob/main/Mall_Customers\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "id": "G_xVP3H-wGuK"
      },
      "outputs": [],
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df = pd.read_csv('/content/Mall_Customers.csv')"
      ],
      "metadata": {
        "id": "53xYxbbnANmY"
      },
      "execution_count": 2,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df.info()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "LZo9eFobAVTb",
        "outputId": "bb0d182e-f4fd-41c9-8512-52dbf34716c5"
      },
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 200 entries, 0 to 199\n",
            "Data columns (total 5 columns):\n",
            " #   Column                  Non-Null Count  Dtype \n",
            "---  ------                  --------------  ----- \n",
            " 0   CustomerID              200 non-null    int64 \n",
            " 1   Gender                  200 non-null    object\n",
            " 2   Age                     200 non-null    int64 \n",
            " 3   Annual Income (k$)      200 non-null    int64 \n",
            " 4   Spending Score (1-100)  200 non-null    int64 \n",
            "dtypes: int64(4), object(1)\n",
            "memory usage: 7.9+ KB\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "UdJ1j76kAalU",
        "outputId": "d26ac163-fb63-463b-f4a2-5bb695f14d31"
      },
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   CustomerID  Gender  Age  Annual Income (k$)  Spending Score (1-100)\n",
              "0           1    Male   19                  15                      39\n",
              "1           2    Male   21                  15                      81\n",
              "2           3  Female   20                  16                       6\n",
              "3           4  Female   23                  16                      77\n",
              "4           5  Female   31                  17                      40"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-2d5aa6cd-4ca8-450b-afe0-5448a6c62744\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>CustomerID</th>\n",
              "      <th>Gender</th>\n",
              "      <th>Age</th>\n",
              "      <th>Annual Income (k$)</th>\n",
              "      <th>Spending Score (1-100)</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1</td>\n",
              "      <td>Male</td>\n",
              "      <td>19</td>\n",
              "      <td>15</td>\n",
              "      <td>39</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2</td>\n",
              "      <td>Male</td>\n",
              "      <td>21</td>\n",
              "      <td>15</td>\n",
              "      <td>81</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>3</td>\n",
              "      <td>Female</td>\n",
              "      <td>20</td>\n",
              "      <td>16</td>\n",
              "      <td>6</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>4</td>\n",
              "      <td>Female</td>\n",
              "      <td>23</td>\n",
              "      <td>16</td>\n",
              "      <td>77</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>5</td>\n",
              "      <td>Female</td>\n",
              "      <td>31</td>\n",
              "      <td>17</td>\n",
              "      <td>40</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-2d5aa6cd-4ca8-450b-afe0-5448a6c62744')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-2d5aa6cd-4ca8-450b-afe0-5448a6c62744 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-2d5aa6cd-4ca8-450b-afe0-5448a6c62744');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-7e7b978a-b247-4144-b776-8254b45890d7\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-7e7b978a-b247-4144-b776-8254b45890d7')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-7e7b978a-b247-4144-b776-8254b45890d7 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df",
              "summary": "{\n  \"name\": \"df\",\n  \"rows\": 200,\n  \"fields\": [\n    {\n      \"column\": \"CustomerID\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 57,\n        \"min\": 1,\n        \"max\": 200,\n        \"num_unique_values\": 200,\n        \"samples\": [\n          96,\n          16,\n          31\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Gender\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"Female\",\n          \"Male\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 13,\n        \"min\": 18,\n        \"max\": 70,\n        \"num_unique_values\": 51,\n        \"samples\": [\n          55,\n          26\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Annual Income (k$)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 26,\n        \"min\": 15,\n        \"max\": 137,\n        \"num_unique_values\": 64,\n        \"samples\": [\n          87,\n          101\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Spending Score (1-100)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 25,\n        \"min\": 1,\n        \"max\": 99,\n        \"num_unique_values\": 84,\n        \"samples\": [\n          83,\n          39\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 5
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.cluster import KMeans"
      ],
      "metadata": {
        "id": "3t0V_T_cA4FA"
      },
      "execution_count": 13,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "X = df.iloc[:, [2, 4]].values"
      ],
      "metadata": {
        "id": "1rHHqSk9A_he"
      },
      "execution_count": 53,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "wcss = []\n",
        "for i in range(1, 11):\n",
        "    kmeans = KMeans(n_clusters=i, init='k-means++', random_state=42)\n",
        "    kmeans.fit(X)\n",
        "    wcss.append(kmeans.inertia_)"
      ],
      "metadata": {
        "id": "LLl-cUuWBBsH"
      },
      "execution_count": 54,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df[['Age', 'Spending Score (1-100)']]"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 423
        },
        "id": "T7YeQqqPBVPi",
        "outputId": "90700e8f-1585-41de-ec5f-095ceefa59fa"
      },
      "execution_count": 55,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "     Age  Spending Score (1-100)\n",
              "0     19                      39\n",
              "1     21                      81\n",
              "2     20                       6\n",
              "3     23                      77\n",
              "4     31                      40\n",
              "..   ...                     ...\n",
              "195   35                      79\n",
              "196   45                      28\n",
              "197   32                      74\n",
              "198   32                      18\n",
              "199   30                      83\n",
              "\n",
              "[200 rows x 2 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-11959506-626a-464b-ba4a-114e9ea1de9e\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Age</th>\n",
              "      <th>Spending Score (1-100)</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>19</td>\n",
              "      <td>39</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>21</td>\n",
              "      <td>81</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>20</td>\n",
              "      <td>6</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>23</td>\n",
              "      <td>77</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>31</td>\n",
              "      <td>40</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>195</th>\n",
              "      <td>35</td>\n",
              "      <td>79</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>196</th>\n",
              "      <td>45</td>\n",
              "      <td>28</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>197</th>\n",
              "      <td>32</td>\n",
              "      <td>74</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>198</th>\n",
              "      <td>32</td>\n",
              "      <td>18</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>199</th>\n",
              "      <td>30</td>\n",
              "      <td>83</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>200 rows × 2 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-11959506-626a-464b-ba4a-114e9ea1de9e')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-11959506-626a-464b-ba4a-114e9ea1de9e button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-11959506-626a-464b-ba4a-114e9ea1de9e');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-0f8f9347-f2bf-43ec-a7ca-d168afdb7c85\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-0f8f9347-f2bf-43ec-a7ca-d168afdb7c85')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-0f8f9347-f2bf-43ec-a7ca-d168afdb7c85 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"df[['Age', 'Spending Score (1-100)']]\",\n  \"rows\": 200,\n  \"fields\": [\n    {\n      \"column\": \"Age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 13,\n        \"min\": 18,\n        \"max\": 70,\n        \"num_unique_values\": 51,\n        \"samples\": [\n          55,\n          26,\n          39\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Spending Score (1-100)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 25,\n        \"min\": 1,\n        \"max\": 99,\n        \"num_unique_values\": 84,\n        \"samples\": [\n          83,\n          39,\n          71\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 55
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "plt.plot(range(1, 11), wcss)\n",
        "plt.title('Elbow Method')\n",
        "plt.xlabel('Number of clusters')\n",
        "plt.ylabel('WCSS')\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 472
        },
        "id": "UlcRuShjBbO1",
        "outputId": "bb9cf0be-e53c-4fe5-d7f6-392491d2703b"
      },
      "execution_count": 56,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "kmeans = KMeans(n_clusters=4, init='k-means++', random_state=42)\n",
        "y_kmeans = kmeans.fit_predict(X)"
      ],
      "metadata": {
        "id": "iAmQFbv-B7Ta"
      },
      "execution_count": 57,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#plt.scatter(X[y_kmeans == 0, 0], X[y_kmeans == 0, 1], s=100, c='red', label='Cluster 1')\n",
        "#plt.scatter(X[y_kmeans == 1, 0], X[y_kmeans == 1, 1], s=100, c='blue', label='Cluster 2')\n",
        "#plt.scatter(X[y_kmeans == 2, 0], X[y_kmeans == 2, 1], s=100, c='green', label='Cluster 3')\n",
        "#plt.scatter(X[y_kmeans == 3, 0], X[y_kmeans == 3, 1], s=100, c='cyan', label='Cluster 4')\n",
        "#plt.scatter(X[y_kmeans == 4, 0], X[y_kmeans == 4, 1], s=100, c='magenta', label='Cluster 5')\n",
        "\n",
        "color = ['red', 'blue', 'green', 'cyan', 'magenta']\n",
        "for i in range(4):\n",
        "    plt.scatter(X[y_kmeans == i, 0], X[y_kmeans == i, 1], s=100, c=color[i], label=f'Cluster {i+1}')\n",
        "plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=300, c='black', label='Centroids')\n",
        "plt.title('Clusters of customers')\n",
        "plt.xlabel('Annual Income (k$)')\n",
        "plt.ylabel('Spending Score (1-100)')\n",
        "plt.legend()\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 472
        },
        "id": "tdB-Jm9qC1qB",
        "outputId": "3fff857e-bcf2-4a36-f8f2-37add30dc41a"
      },
      "execution_count": 58,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.cluster import AgglomerativeClustering"
      ],
      "metadata": {
        "id": "taoJ_02CEEoL"
      },
      "execution_count": 59,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.metrics import silhouette_score"
      ],
      "metadata": {
        "id": "RHwTqeMJGr3h"
      },
      "execution_count": 60,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "y_pred = kmeans.fit_predict(X)\n",
        "score = silhouette_score(X, y_pred)\n",
        "print(score)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "oPdkTZU0HZvp",
        "outputId": "4da01f7e-bcee-4ffa-d211-fae8dcd19fe9"
      },
      "execution_count": 61,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "0.49973941540141753\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.cluster import AgglomerativeClustering"
      ],
      "metadata": {
        "id": "ew6GUN8dIg-G"
      },
      "execution_count": 62,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import scipy.cluster.hierarchy as sch"
      ],
      "metadata": {
        "id": "6gMgy4vVIrZc"
      },
      "execution_count": 63,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "sch.linkage(X, method='ward')\n",
        "plt.show()"
      ],
      "metadata": {
        "id": "KSC4rr03Ixv-"
      },
      "execution_count": 64,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "dendrogram = sch.dendrogram(sch.linkage(X, method='ward'))\n",
        "plt.title('Dendrogram')\n",
        "plt.xlabel('Data Points')\n",
        "plt.ylabel('Euclidean Distance')\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 471
        },
        "id": "ssp9EA0WI5nu",
        "outputId": "6e6ece76-ca29-4d20-a0e6-43c6c594673b"
      },
      "execution_count": 65,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "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WloaU6ZMoUyZMri4uHD+/HkA3nrrLb788ss8FygtLY3ExEQaNGiAra0tmzdvNsadOnWKy5cvExQUBEBQUBBHjx4lLCzMmGbjxo24uroSEBCQ57KIiIjIP4fZoWfq1KksWLCAmTNnZjo7qlatWnzxxRdmzWv8+PHs2LGDixcvcvToUcaPH8+2bdvo378/bm5uPP/884wZM4atW7eyf/9+hgwZQlBQEE2aNAGgffv2BAQEMGDAAA4fPswvv/zChAkTGDlypGpyREREJBOzm7cWLVrEvHnzaNOmDcOHDzeG16lTh5MnT5o1r7CwMAYOHEhISAhubm7Url2bX375hXbt2gHw0UcfUaxYMXr16kViYiLBwcHMmTPHeL21tTWrV69mxIgRBAUF4ezszKBBg5g8ebK5qyUiIiL/cGaHnmvXrhl9cDJKS0sjOTnZrHk9qDnMwcGB2bNnM3v27GynqVChAmvXrjVruSIiImJ5zG7eCggI4Ndff71v+Pfff0+9evXypVAiIiIi+c3smp6JEycyaNAgrl27RlpaGitWrODUqVMsWrSI1atXF0QZRURERPLM7Jqebt268fPPP7Np0yacnZ2ZOHEiJ06c4Oeffzb64oiIiIgUNQ91nZ5mzZqxcePG/C6LiIiISIExu6Zn7969/PHHH/cN/+OPP9i3b1++FEpEREQkv5kdekaOHJnlbRuuXbvGyJEj86VQIiIiIvnN7NBz/Phx6tevf9/wevXqFfg9s0REREQeltmhx97e3ri/VUYhISHY2OTpVl4iIiIiBcbs0NO+fXvjLuXpIiMjefPNN3X2loiIiBRZZlfNvP/++zRv3pwKFSoYFyM8dOgQPj4+fP311/leQBEREZH8YHboKVOmDEeOHGHx4sUcPnwYR0dHhgwZwtNPP42trW1BlFFEREQkzx6qE46zszPDhg3L77KIiIiIFJiHCj1nzpxh69athIWFkZaWlmncxIkT86VgIiIiIvnJ7NDz+eefM2LECEqUKIGvry9WVlbGOCsrK4UeERERKZLMDj1Tp07l3XffZdy4cQVRHhEREZECYfYp67dv36ZPnz4FURYRERGRAmN26OnTpw8bNmwoiLKIiIiIFBizm7cqV67MW2+9xe7duwkMDLzvNPWXX3453wonIiIikl/MDj3z5s3DxcWF7du3s3379kzjrKysFHpERESkSDI7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vvjiC/7973/z0ksvMW/ePLp164anpyfDhg2jfv36VKpUiVu3bmEymRgwYACvvfYaZ8+excHBgaioKJ599lnCw8O5fv0669ev59lnn+XSpUtcv36dNWvWULZsWWrXrg3AZ599RrNmzdi5cyezZs3inXfeoVevXsybN49hw4bl+phv8dfp6du3L0uXLqVChQpcuHCBhg0b0rBhQ+Lj49m/fz8vvPAC77//Pn5+fgQGBrJx40Y6dOjAggUL6NChA25ubpw+fZq5c+fyzjvvUKxYMS5fvkx0dDSenp5cu3aNhg0bEhcXR4kSJTh9+jQ3b97E3t6ewMBA9u7di5OTEyEhIbzxxhvMmjWLqlWr4uvry9y5c7l69SoLFy4kJiaG3bt3c+fOHZydnWncuDGxsbHs2LGD2rVrs2zZMvz8/OjRowepqans3r2bBg0akJSURGJiIvv378fKyop69eqxadMm+vXrx6ZNm6hSpQoLFy6kdu3aNGvWjP3792NnZ4e9vT2XL1+mcuXK1K9fHzc3N3x8fHj77bcpW7YsLVq0oFixYphMJjp37sxXX31FeHg41tbWdO3alY8//piXXnqJzz77DDc3NypUqMD27dtp0qQJ165do0aNGixcuJDAwEAGDRrExx9/TKlSpRg5ciSTJk0ydnR37tzB1dWVCxcu0KZNG2JjY0lMTMTe3p7NmzcbZTaZTMTHx+Po6EiVKlVISkrC39+fAQMG8PHHH3Po0CEaNmzI/v37uXnzJk888YSx3l27diU1NZWdO3dSo0YN9u/fj42NDTdv3jRC6LVr13BwcODixYuEhITQrFkzduzYQYsWLdi/fz9PPPEE4eHh2NjYMGzYMH744QfS0tIICQkhICAAa2trIiIiWLt2LWPHjuWnn37CycmJS5cu0axZM6ytrfn555/p27cvGzduNEJMdHQ0ffv2ZevWrZw/f55Ro0YxZ84cTp48SaVKlVi+fDnff/89P/74IzY2NkydOpUJEybw7rvv8vvvv/PZZ5/Rs2dPLl68SFpaGs2bN8fa2toIxg4ODixdupT27duzb98+IiIiaN++PdbW1nz66adUq1aNunXrkpiYSEpKCn5+fvzxxx/07duX+fPnU79+fRwcHNi5cyfXrl2jbNmytGnTBgcHB1atWkVISAgvvPACp06d4urVqyQlJWFnZ2f8EPD19eXGjRvY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OpXPPvuMO3fu0KJFC7Zs2UJoaCgmk4mwsDDef/99fv75Z3bv3k1CQgJ2dnY8/vjj7N+/nxIlSpCUlERERAT29vbExsYSERFBUlISrq6u1KpViyeeeILnnnuO8uXLM3LkSFq2bMmbb77JG2+8wdSpU+nWrRu//vorpUqVIigoiG+++QaTyURqaqrxq87Z2Rl3d3eCgoJYtmwZs2bN4t///jctW7bkzz//xMrKipo1a3LkyBHs7OwoWbIk+/fv58cff6R3794MGDCA3377jeTkZEqWLMmVK1dwdXUlLi6OYcOG4erqyvjx41m3bh2tW7emQ4cORofsxo0bc/r0aaOJbfjw4cyePZvExERKlCjBwIEDGTBgAIMHDyYsLAwHBwdCQkI4fvw47dq148CBA9StW5erV69y6tQpqlSpQmpqKtevX8ff39/o7BkaGoq9vT23b9829iuHDh0iNTWV8+fP07p1a+zs7EhOTuaFF15g2rRpREREMHHiRAYPHkzVqlU5c+YM9evXZ/78+Tg7OzN9+nTWrl3LuXPnqFOnDomJiUyaNMnotLp3716aNm1KYmIi169f5+zZszg5OVGxYkWee+45XnvtNYoVK8aCBQvo2LEjjz/+OBUqVCA5OZkrV65w+vRpY31CQkL48ssvGT58OPXq1SMmJgZHR0cuXbrE7Nmz+e2339iwYQOXL1/G2dmZq1evcu7cOcqWLcuTTz7Jtm3baNy4MQB37tzB19eXyMhIjh49yowZM/jss89ISkqiTJkybNiwgatXr1KvXj2+/vprxo8fz4ULF+jQoQO//fYbV65coV+/frRo0YKQkBD+85//0KxZM6OJ09nZmR9++IH27duTlpaGtbU1p0+fJiQkxOj398YbbzB+/Hjee+89zp49y9y5cxk+fDhw94fZ+++/z5QpU4yO36+//jo3btzgypUrFC9enPr167No0SLq1KmDu7s7R48excHBAVtbW06dOsX48eP5888/uXPnDsePH2fSpEmMHj0aZ2dnvvzyS/r06UNgYCBeXl7Y2dmxZ88eUlNTmTp1Kq+//jrW1ta88MIL/PLLL8TFxRnbNSIiglKlStGmTRuj/1tycjImk4nffvuNAwcOcPz4caZNm0ZCQgLvvPOO0XxZtmxZGjduTFRUFKmpqVhZWXH69GkaNWrEyZMniYiIoHTp0nTq1In69euz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\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn import metrics"
      ],
      "metadata": {
        "id": "2rTYj5HmI7TC"
      },
      "execution_count": 66,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "hc = AgglomerativeClustering(n_clusters=4, linkage='ward')  # Remove the 'affinity' argument\n",
        "y_hc = hc.fit_predict(X)"
      ],
      "metadata": {
        "id": "DVK-tSRrJREd"
      },
      "execution_count": 67,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "y_hc"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "SMllsXCmJTvm",
        "outputId": "38215fe6-3622-41eb-d64d-80808401b991"
      },
      "execution_count": 68,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([0, 3, 2, 3, 0, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 0, 0, 0, 3, 0, 3,\n",
              "       2, 3, 2, 3, 0, 1, 0, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 1, 3, 0, 1,\n",
              "       0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0,\n",
              "       1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0,\n",
              "       1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1,\n",
              "       1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 3, 0, 3, 0, 3, 2, 3, 2, 3,\n",
              "       0, 3, 2, 3, 2, 3, 2, 3, 2, 3, 0, 3, 2, 3, 0, 3, 2, 3, 2, 3, 2, 3,\n",
              "       2, 3, 2, 3, 2, 3, 1, 3, 2, 3, 0, 3, 2, 3, 2, 1, 2, 3, 2, 3, 2, 3,\n",
              "       2, 3, 2, 3, 0, 3, 2, 3, 0, 3, 0, 3, 2, 3, 2, 3, 2, 3, 2, 3, 0, 3,\n",
              "       2, 3])"
            ]
          },
          "metadata": {},
          "execution_count": 68
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "silhouette_score_hc = metrics.silhouette_score(X, y_hc)\n",
        "print(silhouette_score_hc)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "uxsDkXVzJdJn",
        "outputId": "131361ce-c87f-4724-a3f4-fe1b7e58046d"
      },
      "execution_count": 69,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "0.4602496389565028\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "silhouette_scores = []  # Change the variable name to avoid conflict\n",
        "for i in range(2, 11):\n",
        "  hc = AgglomerativeClustering(n_clusters=i, linkage='ward')\n",
        "  y_hc = hc.fit_predict(X)\n",
        "  silhouette_scores.append(metrics.silhouette_score(X, y_hc))\n"
      ],
      "metadata": {
        "id": "QLtWTHI3KQQy"
      },
      "execution_count": 78,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "silhouette_scores"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "p1EDD6ROKjUe",
        "outputId": "b64ae11a-48d8-4d79-8a80-feb651ce3918"
      },
      "execution_count": 80,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[0.4549465643222241,\n",
              " 0.4411791686353356,\n",
              " 0.4602496389565028,\n",
              " 0.40374071753059787,\n",
              " 0.4125958704145705,\n",
              " 0.4158977524079244,\n",
              " 0.3883688959732531,\n",
              " 0.3948151533262091,\n",
              " 0.3876666104778445]"
            ]
          },
          "metadata": {},
          "execution_count": 80
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "QjJJ_MYuK2Ls"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}